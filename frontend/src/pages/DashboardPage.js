import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Progress } from '../components/ui/progress';\nimport { Badge } from '../components/ui/badge';\nimport { Avatar, AvatarFallback } from '../components/ui/avatar';\nimport { \n  Code, \n  Trophy, \n  Target, \n  Zap, \n  BookOpen, \n  Star, \n  Play, \n  Lock, \n  CheckCircle, \n  Clock,\n  TrendingUp,\n  Award,\n  Calendar\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport axios from 'axios';\n\nconst DashboardPage = () => {\n  const { currentUser, userStats, updateUserStats } = useAuth();\n  const [levels, setLevels] = useState([]);\n  const [userProgress, setUserProgress] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [recentActivity] = useState([\n    { type: 'level_complete', level: 102, xp: 75, time: '2 hours ago' },\n    { type: 'badge_earned', badge: 'First Steps', time: '1 day ago' },\n    { type: 'level_complete', level: 101, xp: 75, time: '2 days ago' }\n  ]);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  const fetchDashboardData = async () => {\n    try {\n      const [levelsResponse, progressResponse] = await Promise.all([\n        axios.get('/api/levels?limit=10'),\n        axios.get('/api/user/progress')\n      ]);\n      \n      setLevels(levelsResponse.data);\n      setUserProgress(progressResponse.data);\n    } catch (error) {\n      console.error('Failed to fetch dashboard data:', error);\n      toast.error('Failed to load dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case 'Easy': return 'bg-green-100 text-green-800';\n      case 'Medium': return 'bg-yellow-100 text-yellow-800';\n      case 'Hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getActivityIcon = (type) => {\n    switch (type) {\n      case 'level_complete': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'badge_earned': return <Award className=\"h-4 w-4 text-amber-500\" />;\n      default: return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getCurrentLevelProgress = () => {\n    const currentLevel = userStats?.current_level || 100;\n    const totalXP = userStats?.total_xp || 0;\n    const baseXP = (currentLevel - 100) * 100; // Simplified XP calculation\n    const currentLevelXP = totalXP - baseXP;\n    return Math.min((currentLevelXP / 100) * 100, 100);\n  };\n\n  const availableLevels = levels.filter(level => \n    level.level_id <= (userStats?.current_level || 100)\n  );\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Welcome Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Avatar className=\"h-16 w-16\">\n              <AvatarFallback className=\"bg-gradient-to-br from-orange-400 to-amber-500 text-white text-xl font-bold\">\n                {currentUser?.username?.charAt(0).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"welcome-message\">\n                Welcome back, {currentUser?.username}!\n              </h1>\n              <p className=\"text-gray-600\">Ready to continue your Python journey?</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"glass-card border-0\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Current Level</CardTitle>\n              <Target className=\"h-4 w-4 text-orange-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"current-level\">\n                Level {userStats?.current_level || 100}\n              </div>\n              <Progress value={getCurrentLevelProgress()} className=\"mt-2\" />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {Math.round(getCurrentLevelProgress())}% to next level\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-0\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total XP</CardTitle>\n              <Zap className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold gradient-text\" data-testid=\"total-xp\">\n                {userStats?.total_xp || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n                +{userStats?.total_xp > 0 ? '75' : '0'} this week\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-0\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Completed Levels</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"completed-levels\">\n                {userStats?.completed_levels || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                of 300+ available levels\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-0\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Badges Earned</CardTitle>\n              <Award className=\"h-4 w-4 text-purple-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"badges-count\">\n                {userStats?.badges?.length || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Unlock more with progress\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Available Levels */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold\">Continue Learning</h2>\n              <Link to={`/level/${userStats?.current_level || 100}`}>\n                <Button className=\"bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600\">\n                  <Play className=\"mr-2 h-4 w-4\" />\n                  Start Next Level\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"space-y-4\">\n              {availableLevels.map((level) => {\n                const progress = userProgress[level.level_id];\n                const isCompleted = progress?.is_completed;\n                const isLocked = level.level_id > (userStats?.current_level || 100);\n\n                return (\n                  <Card \n                    key={level.id} \n                    className={`level-card border-0 ${isCompleted ? 'bg-green-50/50' : ''}`}\n                    data-testid={`level-${level.level_id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`p-2 rounded-lg ${\n                            isCompleted ? 'bg-green-100' : \n                            isLocked ? 'bg-gray-100' : 'bg-orange-100'\n                          }`}>\n                            {isCompleted ? (\n                              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                            ) : isLocked ? (\n                              <Lock className=\"h-5 w-5 text-gray-400\" />\n                            ) : (\n                              <Code className=\"h-5 w-5 text-orange-600\" />\n                            )}\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-lg\">\n                              Level {level.level_id}: {level.title}\n                              {isCompleted && <CheckCircle className=\"inline ml-2 h-4 w-4 text-green-500\" />}\n                            </CardTitle>\n                            <CardDescription className=\"text-sm\">\n                              {level.category} â€¢ {level.xp_reward} XP\n                            </CardDescription>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className={getDifficultyColor(level.difficulty)}>\n                            {level.difficulty}\n                          </Badge>\n                          {progress?.stars > 0 && (\n                            <div className=\"flex\">\n                              {[...Array(3)].map((_, i) => (\n                                <Star\n                                  key={i}\n                                  className={`h-4 w-4 ${\n                                    i < progress.stars\n                                      ? 'text-amber-400 fill-current'\n                                      : 'text-gray-300'\n                                  }`}\n                                />\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-600 mb-4\">{level.description}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm text-gray-500\">\n                          {progress?.attempts > 0 && (\n                            <span>{progress.attempts} attempt{progress.attempts !== 1 ? 's' : ''}</span>\n                          )}\n                        </div>\n                        <Link to={`/level/${level.level_id}`}>\n                          <Button \n                            variant={isCompleted ? \"outline\" : \"default\"}\n                            disabled={isLocked}\n                            className={!isCompleted && !isLocked ? 'bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600' : ''}\n                            data-testid={`start-level-${level.level_id}`}\n                          >\n                            {isLocked ? (\n                              <>\n                                <Lock className=\"mr-2 h-4 w-4\" />\n                                Locked\n                              </>\n                            ) : isCompleted ? (\n                              <>\n                                <BookOpen className=\"mr-2 h-4 w-4\" />\n                                Review\n                              </>\n                            ) : (\n                              <>\n                                <Play className=\"mr-2 h-4 w-4\" />\n                                Start\n                              </>\n                            )}\n                          </Button>\n                        </Link>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Recent Badges */}\n            {userStats?.badges && userStats.badges.length > 0 && (\n              <Card className=\"glass-card border-0\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Trophy className=\"h-5 w-5 text-amber-500\" />\n                    <span>Recent Badges</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {userStats.badges.slice(0, 3).map((badge, index) => (\n                    <div key={index} className=\"flex items-center space-x-3 p-2 rounded-lg bg-amber-50\">\n                      <div className=\"text-2xl\">{badge.icon}</div>\n                      <div>\n                        <p className=\"font-medium\">{badge.name}</p>\n                        <p className=\"text-xs text-gray-500\">Earned recently</p>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Recent Activity */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5 text-blue-500\" />\n                  <span>Recent Activity</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {recentActivity.map((activity, index) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50\">\n                    {getActivityIcon(activity.type)}\n                    <div className=\"flex-1\">\n                      {activity.type === 'level_complete' ? (\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">Completed Level {activity.level}</span>\n                          <span className=\"text-green-600 ml-2\">+{activity.xp} XP</span>\n                        </p>\n                      ) : (\n                        <p className=\"text-sm\">\n                          <span className=\"font-medium\">Earned \"{activity.badge}\" badge</span>\n                        </p>\n                      )}\n                      <p className=\"text-xs text-gray-500\">{activity.time}</p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link to=\"/leaderboard\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Trophy className=\"mr-2 h-4 w-4\" />\n                    View Leaderboard\n                  </Button>\n                </Link>\n                <Link to=\"/profile\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Target className=\"mr-2 h-4 w-4\" />\n                    View Profile\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardPage;"