import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { Avatar, AvatarFallback } from '../components/ui/avatar';\nimport { Progress } from '../components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport {\n  Trophy,\n  Medal,\n  Crown,\n  Star,\n  TrendingUp,\n  Users,\n  Zap,\n  Target,\n  Award,\n  Calendar,\n  Flame\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport axios from 'axios';\n\nconst LeaderboardPage = () => {\n  const { currentUser, userStats } = useAuth();\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [timeframe, setTimeframe] = useState('all-time');\n  \n  // Mock data for weekly and monthly leaderboards\n  const [weeklyLeaders] = useState([\n    { rank: 1, username: 'PythonMaster', total_xp: 2450, completed_levels: 45, current_level: 145, weekly_xp: 850 },\n    { rank: 2, username: 'CodeNinja', total_xp: 2200, completed_levels: 38, current_level: 138, weekly_xp: 720 },\n    { rank: 3, username: 'DevQueen', total_xp: 1980, completed_levels: 35, current_level: 135, weekly_xp: 680 },\n    { rank: 4, username: 'ByteWizard', total_xp: 1750, completed_levels: 32, current_level: 132, weekly_xp: 620 },\n    { rank: 5, username: 'AlgoExpert', total_xp: 1600, completed_levels: 28, current_level: 128, weekly_xp: 580 }\n  ]);\n\n  const [monthlyLeaders] = useState([\n    { rank: 1, username: 'CodeMaster', total_xp: 3200, completed_levels: 58, current_level: 158, monthly_xp: 1200 },\n    { rank: 2, username: 'PythonGuru', total_xp: 2980, completed_levels: 52, current_level: 152, monthly_xp: 1150 },\n    { rank: 3, username: 'DevLegend', total_xp: 2750, completed_levels: 48, current_level: 148, monthly_xp: 1080 },\n    { rank: 4, username: 'ByteMaster', total_xp: 2500, completed_levels: 44, current_level: 144, monthly_xp: 980 },\n    { rank: 5, username: 'CodeCrusher', total_xp: 2300, completed_levels: 41, current_level: 141, monthly_xp: 920 }\n  ]);\n\n  useEffect(() => {\n    fetchLeaderboard();\n  }, []);\n\n  const fetchLeaderboard = async () => {\n    try {\n      const response = await axios.get('/api/leaderboard?limit=50');\n      setLeaderboard(response.data);\n    } catch (error) {\n      console.error('Failed to fetch leaderboard:', error);\n      toast.error('Failed to load leaderboard');\n      // Use mock data as fallback\n      setLeaderboard([\n        { rank: 1, username: 'PythonPro', total_xp: 3500, completed_levels: 62, current_level: 162 },\n        { rank: 2, username: 'CodeChamp', total_xp: 3200, completed_levels: 58, current_level: 158 },\n        { rank: 3, username: 'DevExpert', total_xp: 2950, completed_levels: 54, current_level: 154 },\n        { rank: 4, username: 'ByteHero', total_xp: 2750, completed_levels: 50, current_level: 150 },\n        { rank: 5, username: 'AlgoWiz', total_xp: 2500, completed_levels: 46, current_level: 146 }\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCurrentUserRank = () => {\n    const userEntry = leaderboard.find(entry => entry.username === currentUser?.username);\n    return userEntry?.rank || leaderboard.length + 1;\n  };\n\n  const getRankIcon = (rank) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"h-6 w-6 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"h-6 w-6 text-gray-400\" />;\n      case 3:\n        return <Medal className=\"h-6 w-6 text-amber-600\" />;\n      default:\n        return (\n          <div className=\"h-6 w-6 rounded-full bg-gray-200 flex items-center justify-center text-sm font-bold text-gray-600\">\n            {rank}\n          </div>\n        );\n    }\n  };\n\n  const getRankBadge = (rank) => {\n    if (rank <= 3) {\n      return (\n        <Badge className={`${\n          rank === 1 ? 'bg-gradient-to-r from-yellow-400 to-yellow-600 text-yellow-900' :\n          rank === 2 ? 'bg-gradient-to-r from-gray-300 to-gray-500 text-gray-900' :\n          'bg-gradient-to-r from-amber-400 to-amber-600 text-amber-900'\n        } font-bold`}>\n          #{rank}\n        </Badge>\n      );\n    }\n    return <Badge variant=\"outline\">#{rank}</Badge>;\n  };\n\n  const getLeaderboardData = () => {\n    switch (timeframe) {\n      case 'weekly':\n        return weeklyLeaders;\n      case 'monthly':\n        return monthlyLeaders;\n      default:\n        return leaderboard;\n    }\n  };\n\n  const getXPLabel = () => {\n    switch (timeframe) {\n      case 'weekly':\n        return 'Weekly XP';\n      case 'monthly':\n        return 'Monthly XP';\n      default:\n        return 'Total XP';\n    }\n  };\n\n  const getXPValue = (entry) => {\n    switch (timeframe) {\n      case 'weekly':\n        return entry.weekly_xp || entry.total_xp;\n      case 'monthly':\n        return entry.monthly_xp || entry.total_xp;\n      default:\n        return entry.total_xp;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500\"></div>\n      </div>\n    );\n  }\n\n  const data = getLeaderboardData();\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 rounded-full bg-gradient-to-br from-amber-400 to-yellow-500\">\n              <Trophy className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold gradient-text mb-2\">Leaderboard</h1>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Compete with fellow Python learners and climb your way to the top!\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          {/* Main Leaderboard */}\n          <div className=\"lg:col-span-3\">\n            {/* Timeframe Selector */}\n            <Tabs value={timeframe} onValueChange={setTimeframe} className=\"mb-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"all-time\" data-testid=\"tab-all-time\">\n                  <Trophy className=\"mr-2 h-4 w-4\" />\n                  All Time\n                </TabsTrigger>\n                <TabsTrigger value=\"monthly\" data-testid=\"tab-monthly\">\n                  <Calendar className=\"mr-2 h-4 w-4\" />\n                  This Month\n                </TabsTrigger>\n                <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">\n                  <Flame className=\"mr-2 h-4 w-4\" />\n                  This Week\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            {/* Top 3 Podium */}\n            <div className=\"grid md:grid-cols-3 gap-4 mb-8\">\n              {data.slice(0, 3).map((entry, index) => {\n                const actualRank = entry.rank || index + 1;\n                return (\n                  <Card \n                    key={entry.username} \n                    className={`glass-card border-0 text-center relative overflow-hidden ${\n                      actualRank === 1 ? 'ring-2 ring-yellow-400 bg-gradient-to-br from-yellow-50 to-amber-50' :\n                      actualRank === 2 ? 'ring-2 ring-gray-400 bg-gradient-to-br from-gray-50 to-slate-50' :\n                      'ring-2 ring-amber-400 bg-gradient-to-br from-amber-50 to-orange-50'\n                    }`}\n                    data-testid={`podium-${actualRank}`}\n                  >\n                    {/* Crown/Medal decoration */}\n                    <div className=\"absolute top-2 right-2\">\n                      {getRankIcon(actualRank)}\n                    </div>\n                    \n                    <CardContent className=\"pt-6 pb-4\">\n                      <div className=\"mb-4\">\n                        <Avatar className=\"h-16 w-16 mx-auto mb-3\">\n                          <AvatarFallback className={`text-white text-xl font-bold ${\n                            actualRank === 1 ? 'bg-gradient-to-br from-yellow-400 to-yellow-600' :\n                            actualRank === 2 ? 'bg-gradient-to-br from-gray-400 to-gray-600' :\n                            'bg-gradient-to-br from-amber-400 to-amber-600'\n                          }`}>\n                            {entry.username.charAt(0).toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <h3 className=\"font-bold text-lg mb-1\">{entry.username}</h3>\n                        <p className=\"text-sm text-gray-600\">Level {entry.current_level}</p>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-2xl font-bold gradient-text\">\n                          {getXPValue(entry).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">{getXPLabel()}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {entry.completed_levels} levels completed\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Full Leaderboard */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5 text-blue-500\" />\n                  <span>Full Rankings</span>\n                </CardTitle>\n                <CardDescription>\n                  Complete leaderboard for {timeframe.replace('-', ' ')} performance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"divide-y divide-gray-100\">\n                  {data.map((entry, index) => {\n                    const actualRank = entry.rank || index + 1;\n                    const isCurrentUser = entry.username === currentUser?.username;\n                    \n                    return (\n                      <div\n                        key={entry.username}\n                        className={`flex items-center justify-between p-4 hover:bg-gray-50 transition-colors ${\n                          isCurrentUser ? 'bg-orange-50 border-l-4 border-orange-400' : ''\n                        }`}\n                        data-testid={`leaderboard-entry-${actualRank}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            {getRankBadge(actualRank)}\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarFallback className=\"bg-gradient-to-br from-gray-400 to-gray-600 text-white font-bold\">\n                                {entry.username.charAt(0).toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                          </div>\n                          <div>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-semibold text-gray-900\">\n                                {entry.username}\n                              </span>\n                              {isCurrentUser && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  You\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              Level {entry.current_level} • {entry.completed_levels} completed\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <div className=\"font-bold text-gray-900\">\n                            {getXPValue(entry).toLocaleString()} XP\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {getXPLabel()}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* User Position */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"h-5 w-5 text-orange-500\" />\n                  <span>Your Position</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <div className=\"mb-4\">\n                  <Avatar className=\"h-16 w-16 mx-auto mb-3\">\n                    <AvatarFallback className=\"bg-gradient-to-br from-orange-400 to-amber-500 text-white text-2xl font-bold\">\n                      {currentUser?.username?.charAt(0).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <h3 className=\"font-bold text-lg\">{currentUser?.username}</h3>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"text-3xl font-bold gradient-text\" data-testid=\"user-rank\">\n                      #{getCurrentUserRank()}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Current Rank</div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-3 text-center\">\n                    <div>\n                      <div className=\"font-bold text-gray-900\">{userStats?.total_xp || 0}</div>\n                      <div className=\"text-xs text-gray-500\">Total XP</div>\n                    </div>\n                    <div>\n                      <div className=\"font-bold text-gray-900\">{userStats?.completed_levels || 0}</div>\n                      <div className=\"text-xs text-gray-500\">Completed</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Achievements */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Award className=\"h-5 w-5 text-purple-500\" />\n                  <span>Top Achievements</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {userStats?.badges && userStats.badges.length > 0 ? (\n                  userStats.badges.slice(0, 3).map((badge, index) => (\n                    <div key={index} className=\"flex items-center space-x-3 p-2 rounded-lg bg-purple-50\">\n                      <div className=\"text-xl\">{badge.icon}</div>\n                      <div>\n                        <p className=\"font-medium text-sm\">{badge.name}</p>\n                        <p className=\"text-xs text-gray-500\">Recently earned</p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center text-gray-500 py-4\">\n                    <Award className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">Complete levels to earn badges!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Leaderboard Stats */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                  <span>Community Stats</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">{data.length}</div>\n                  <div className=\"text-sm text-gray-600\">Active Learners</div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Avg Level:</span>\n                    <span className=\"font-medium\">\n                      {Math.round(data.reduce((acc, entry) => acc + entry.current_level, 0) / data.length) || 100}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Top XP:</span>\n                    <span className=\"font-medium\">\n                      {data[0]?.total_xp?.toLocaleString() || '0'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Total Completions:</span>\n                    <span className=\"font-medium\">\n                      {data.reduce((acc, entry) => acc + entry.completed_levels, 0).toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaderboardPage;"