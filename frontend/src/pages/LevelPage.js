import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport MonacoEditor from '@monaco-editor/react';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { Progress } from '../components/ui/progress';\nimport { Separator } from '../components/ui/separator';\nimport { Alert, AlertDescription } from '../components/ui/alert';\nimport {\n  Play,\n  RotateCcw,\n  CheckCircle,\n  XCircle,\n  Lightbulb,\n  ArrowLeft,\n  ArrowRight,\n  Star,\n  Trophy,\n  Target,\n  Code\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport axios from 'axios';\n\nconst LevelPage = () => {\n  const { levelId } = useParams();\n  const navigate = useNavigate();\n  const { updateUserStats } = useAuth();\n  const [level, setLevel] = useState(null);\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [isRunning, setIsRunning] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState(null);\n  const [showHints, setShowHints] = useState(false);\n  const [attempts, setAttempts] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchLevel();\n  }, [levelId]);\n\n  const fetchLevel = async () => {\n    try {\n      const response = await axios.get(`/api/levels/${levelId}`);\n      setLevel(response.data);\n      setCode(response.data.starter_code);\n    } catch (error) {\n      console.error('Failed to fetch level:', error);\n      toast.error('Failed to load level');\n      navigate('/dashboard');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const runCode = async () => {\n    setIsRunning(true);\n    setOutput('');\n    \n    // Simulate code execution with a simple Python interpreter\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate execution time\n      \n      // Basic Python code execution simulation\n      const simulatedOutput = executeSimplePython(code);\n      setOutput(simulatedOutput);\n      \n      toast.success('Code executed successfully!');\n    } catch (error) {\n      setOutput('Error: ' + error.message);\n      toast.error('Execution error');\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  // Simple Python code execution simulator\n  const executeSimplePython = (code) => {\n    try {\n      // Remove comments and empty lines\n      const lines = code.split('\\n').filter(line => \n        line.trim() && !line.trim().startsWith('#')\n      );\n      \n      let output = [];\n      let variables = {};\n      \n      for (let line of lines) {\n        line = line.trim();\n        \n        // Handle print statements\n        if (line.includes('print(')) {\n          const printMatch = line.match(/print\\((.*)\\)/);\n          if (printMatch) {\n            let content = printMatch[1];\n            \n            // Handle string literals\n            if (content.includes('\"') || content.includes(\"'\")) {\n              content = content.replace(/[\"']/g, '');\n              output.push(content);\n            }\n            // Handle variable printing\n            else if (variables[content]) {\n              output.push(variables[content].toString());\n            }\n            // Handle expressions\n            else {\n              try {\n                const result = evaluateExpression(content, variables);\n                output.push(result.toString());\n              } catch (e) {\n                output.push(content);\n              }\n            }\n          }\n        }\n        // Handle variable assignments\n        else if (line.includes('=') && !line.includes('==')) {\n          const [varName, expression] = line.split('=').map(s => s.trim());\n          \n          // Handle string assignments\n          if (expression.includes('\"') || expression.includes(\"'\")) {\n            variables[varName] = expression.replace(/[\"']/g, '');\n          }\n          // Handle numeric assignments and expressions\n          else {\n            try {\n              variables[varName] = evaluateExpression(expression, variables);\n            } catch (e) {\n              variables[varName] = expression;\n            }\n          }\n        }\n        // Handle for loops (simplified)\n        else if (line.includes('for') && line.includes('range(')) {\n          const rangeMatch = line.match(/for\\s+(\\w+)\\s+in\\s+range\\((.*)\\)/);\n          if (rangeMatch) {\n            const [, varName, rangeParams] = rangeMatch;\n            const params = rangeParams.split(',').map(p => parseInt(p.trim()));\n            \n            let start = 0, end = params[0], step = 1;\n            if (params.length === 2) {\n              [start, end] = params;\n            } else if (params.length === 3) {\n              [start, end, step] = params;\n            }\n            \n            for (let i = start; i < end; i += step) {\n              variables[varName] = i;\n              // This is a simplified approach - in a real implementation,\n              // we'd need to execute the loop body\n              output.push(i.toString());\n            }\n          }\n        }\n      }\n      \n      return output.join('\\n') || 'No output';\n    } catch (error) {\n      throw new Error('Execution failed: ' + error.message);\n    }\n  };\n\n  const evaluateExpression = (expr, variables) => {\n    // Replace variables with their values\n    let processed = expr;\n    for (let [varName, value] of Object.entries(variables)) {\n      processed = processed.replace(new RegExp(`\\\\b${varName}\\\\b`, 'g'), value);\n    }\n    \n    // Handle string concatenation\n    if (processed.includes('+') && (processed.includes('\"') || processed.includes(\"'\"))) {\n      const parts = processed.split('+').map(p => p.trim().replace(/[\"']/g, ''));\n      return parts.join('');\n    }\n    \n    // Evaluate numeric expressions\n    try {\n      return eval(processed);\n    } catch (e) {\n      return processed;\n    }\n  };\n\n  const submitSolution = async () => {\n    if (!output) {\n      toast.error('Please run your code first!');\n      return;\n    }\n\n    setIsSubmitting(true);\n    setAttempts(prev => prev + 1);\n\n    try {\n      const response = await axios.post(`/api/levels/${levelId}/submit`, {\n        code: code,\n        output: output\n      });\n\n      setResult(response.data);\n      \n      if (response.data.success) {\n        toast.success(\n          <div>\n            <div className=\"font-semibold\">ðŸŽ‰ Level Completed!</div>\n            <div className=\"text-sm\">+{response.data.xp_earned || 0} XP earned</div>\n          </div>\n        );\n        updateUserStats(response.data.stats);\n      } else {\n        toast.error('Keep trying! Check your output.');\n      }\n    } catch (error) {\n      console.error('Failed to submit solution:', error);\n      toast.error('Failed to submit solution');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resetCode = () => {\n    setCode(level.starter_code);\n    setOutput('');\n    setResult(null);\n    toast.info('Code reset to starting template');\n  };\n\n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case 'Easy': return 'bg-green-100 text-green-800';\n      case 'Medium': return 'bg-yellow-100 text-yellow-800';\n      case 'Hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500\"></div>\n      </div>\n    );\n  }\n\n  if (!level) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Level not found</h2>\n          <Button onClick={() => navigate('/dashboard')}>Back to Dashboard</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-6 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => navigate('/dashboard')}\n              data-testid=\"back-to-dashboard\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\" data-testid=\"level-title\">\n                Level {level.level_id}: {level.title}\n              </h1>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge className={getDifficultyColor(level.difficulty)}>\n                  {level.difficulty}\n                </Badge>\n                <span className=\"text-sm text-gray-500\">{level.category}</span>\n                <span className=\"text-sm text-orange-600 font-medium\">{level.xp_reward} XP</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowHints(!showHints)}\n              data-testid=\"toggle-hints\"\n            >\n              <Lightbulb className=\"mr-2 h-4 w-4\" />\n              {showHints ? 'Hide' : 'Show'} Hints\n            </Button>\n            {parseInt(levelId) > 100 && (\n              <Button \n                variant=\"outline\" \n                onClick={() => navigate(`/level/${parseInt(levelId) - 1}`)}\n                data-testid=\"previous-level\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {parseInt(levelId) < 400 && (\n              <Button \n                variant=\"outline\" \n                onClick={() => navigate(`/level/${parseInt(levelId) + 1}`)}\n                data-testid=\"next-level\"\n              >\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Challenge Description */}\n          <div className=\"space-y-6\">\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"h-5 w-5 text-orange-500\" />\n                  <span>Challenge</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 leading-relaxed\" data-testid=\"level-description\">\n                  {level.description}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Hints */}\n            {showHints && level.hints && level.hints.length > 0 && (\n              <Card className=\"glass-card border-0 border-l-4 border-l-amber-400\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2 text-amber-700\">\n                    <Lightbulb className=\"h-5 w-5\" />\n                    <span>Hints</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {level.hints.map((hint, index) => (\n                    <div key={index} className=\"flex items-start space-x-2\">\n                      <span className=\"inline-block w-5 h-5 rounded-full bg-amber-100 text-amber-700 text-xs font-bold flex items-center justify-center mt-0.5\">\n                        {index + 1}\n                      </span>\n                      <p className=\"text-amber-700\">{hint}</p>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Expected Output */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  <span>Expected Output</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <pre className=\"bg-gray-50 p-3 rounded-lg text-sm font-mono border\" data-testid=\"expected-output\">\n                  {level.expected_output}\n                </pre>\n              </CardContent>\n            </Card>\n\n            {/* Progress */}\n            <Card className=\"glass-card border-0\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                  <span>Attempts: {attempts}</span>\n                  {result && (\n                    <span className=\"flex items-center space-x-1\">\n                      {result.success ? (\n                        <>\n                          <Trophy className=\"h-4 w-4 text-amber-500\" />\n                          <span>{result.stars}/3 stars</span>\n                        </>\n                      ) : (\n                        <span className=\"text-orange-600\">Keep trying!</span>\n                      )}\n                    </span>\n                  )}\n                </div>\n                {attempts > 0 && (\n                  <Progress value={result?.success ? 100 : Math.min(attempts * 10, 90)} />\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Code Editor and Output */}\n          <div className=\"space-y-6\">\n            {/* Code Editor */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Code className=\"h-5 w-5 text-blue-500\" />\n                    <span>Python Code</span>\n                  </CardTitle>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={resetCode}\n                    data-testid=\"reset-code\"\n                  >\n                    <RotateCcw className=\"mr-2 h-4 w-4\" />\n                    Reset\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <MonacoEditor\n                    height=\"400px\"\n                    language=\"python\"\n                    value={code}\n                    onChange={setCode}\n                    theme=\"light\"\n                    options={{\n                      minimap: { enabled: false },\n                      fontSize: 14,\n                      lineNumbers: 'on',\n                      scrollBeyondLastLine: false,\n                      automaticLayout: true,\n                      tabSize: 4,\n                      insertSpaces: true,\n                      wordWrap: 'on',\n                      bracketPairColorization: { enabled: true }\n                    }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={runCode}\n                disabled={isRunning}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white flex-1\"\n                data-testid=\"run-code\"\n              >\n                {isRunning ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\" />\n                    Running...\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"mr-2 h-4 w-4\" />\n                    Run Code\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={submitSolution}\n                disabled={isSubmitting || !output}\n                className=\"bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 text-white flex-1\"\n                data-testid=\"submit-solution\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\" />\n                    Submitting...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    Submit Solution\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {/* Output */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    {result?.success ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    ) : result && !result.success ? (\n                      <XCircle className=\"h-5 w-5 text-red-500\" />\n                    ) : (\n                      <Code className=\"h-5 w-5 text-gray-500\" />\n                    )}\n                    <span>Output</span>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result && (\n                  <Alert className={`mb-4 ${\n                    result.success \n                      ? 'border-green-200 bg-green-50' \n                      : 'border-orange-200 bg-orange-50'\n                  }`}>\n                    <AlertDescription className={result.success ? 'text-green-800' : 'text-orange-800'}>\n                      {result.message}\n                      {result.success && result.xp_earned > 0 && (\n                        <span className=\"ml-2 font-semibold\">+{result.xp_earned} XP</span>\n                      )}\n                    </AlertDescription>\n                  </Alert>\n                )}\n                <pre \n                  className=\"bg-gray-900 text-green-400 p-4 rounded-lg text-sm font-mono min-h-[100px] overflow-auto\"\n                  data-testid=\"code-output\"\n                >\n                  {output || 'No output yet. Click \"Run Code\" to execute your program.'}\n                </pre>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LevelPage;"