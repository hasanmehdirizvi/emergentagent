import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Progress } from '../components/ui/progress';\nimport { Avatar, AvatarFallback } from '../components/ui/avatar';\nimport { Badge } from '../components/ui/badge';\nimport { Separator } from '../components/ui/separator';\nimport {\n  User,\n  Mail,\n  Calendar,\n  Trophy,\n  Target,\n  Zap,\n  Award,\n  TrendingUp,\n  Clock,\n  Code,\n  Star,\n  CheckCircle,\n  Flame\n} from 'lucide-react';\nimport axios from 'axios';\n\nconst ProfilePage = () => {\n  const { currentUser, userStats } = useAuth();\n  const [userProgress, setUserProgress] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [achievements] = useState([\n    { id: 1, name: 'First Steps', icon: '🎯', description: 'Complete your first level', earned: true, earnedAt: '2024-01-15' },\n    { id: 2, name: 'Quick Learner', icon: '⚡', description: 'Complete 5 levels in one day', earned: false },\n    { id: 3, name: 'Dedication', icon: '📚', description: 'Complete 10 levels', earned: userStats?.completed_levels >= 10 },\n    { id: 4, name: 'Code Master', icon: '💻', description: 'Complete 25 levels', earned: userStats?.completed_levels >= 25 },\n    { id: 5, name: 'Python Expert', icon: '🐍', description: 'Complete 50 levels', earned: userStats?.completed_levels >= 50 },\n    { id: 6, name: 'Perfectionist', icon: '⭐', description: 'Get 3 stars on 10 levels', earned: false },\n    { id: 7, name: 'Speed Runner', icon: '🏃', description: 'Complete a level in under 5 minutes', earned: false },\n    { id: 8, name: 'Problem Solver', icon: '🧩', description: 'Complete all Easy levels', earned: false },\n  ]);\n\n  useEffect(() => {\n    fetchUserProgress();\n  }, []);\n\n  const fetchUserProgress = async () => {\n    try {\n      const response = await axios.get('/api/user/progress');\n      setUserProgress(response.data);\n    } catch (error) {\n      console.error('Failed to fetch user progress:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCurrentLevelProgress = () => {\n    const currentLevel = userStats?.current_level || 100;\n    const totalXP = userStats?.total_xp || 0;\n    const baseXP = (currentLevel - 100) * 100;\n    const currentLevelXP = totalXP - baseXP;\n    return Math.min((currentLevelXP / 100) * 100, 100);\n  };\n\n  const getCompletedLevelsInCategory = (category) => {\n    const categoryLevels = {\n      'Python Basics': { start: 100, end: 149 },\n      'Control Flow': { start: 150, end: 199 },\n      'Data Structures': { start: 200, end: 249 },\n      'Object-Oriented': { start: 250, end: 299 },\n      'Libraries & APIs': { start: 300, end: 349 },\n      'Projects': { start: 350, end: 400 }\n    };\n\n    const range = categoryLevels[category];\n    if (!range) return { completed: 0, total: 0 };\n\n    let completed = 0;\n    const total = range.end - range.start + 1;\n\n    for (let level = range.start; level <= range.end; level++) {\n      if (userProgress[level]?.is_completed) {\n        completed++;\n      }\n    }\n\n    return { completed, total };\n  };\n\n  const getMemberSince = () => {\n    if (!currentUser?.created_at) return 'Recently';\n    const date = new Date(currentUser.created_at);\n    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  };\n\n  const getLastActive = () => {\n    if (!currentUser?.last_login) return 'Recently';\n    const date = new Date(currentUser.last_login);\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'Today';\n    if (diffDays <= 7) return `${diffDays} days ago`;\n    return date.toLocaleDateString();\n  };\n\n  const categories = [\n    { name: 'Python Basics', color: 'bg-green-500', levels: '100-149' },\n    { name: 'Control Flow', color: 'bg-blue-500', levels: '150-199' },\n    { name: 'Data Structures', color: 'bg-purple-500', levels: '200-249' },\n    { name: 'Object-Oriented', color: 'bg-orange-500', levels: '250-299' },\n    { name: 'Libraries & APIs', color: 'bg-red-500', levels: '300-349' },\n    { name: 'Projects', color: 'bg-indigo-500', levels: '350-400' }\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Profile Header */}\n        <Card className=\"glass-card border-0 mb-8\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center space-y-4 md:space-y-0 md:space-x-6\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarFallback className=\"bg-gradient-to-br from-orange-400 to-amber-500 text-white text-3xl font-bold\">\n                  {currentUser?.username?.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1\">\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900 mb-1\" data-testid=\"profile-username\">\n                      {currentUser?.username}\n                    </h1>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Mail className=\"h-4 w-4\" />\n                        <span>{currentUser?.email}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>Member since {getMemberSince()}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>Last active {getLastActive()}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold gradient-text\" data-testid=\"profile-level\">\n                      Level {userStats?.current_level || 100}\n                    </div>\n                    <div className=\"text-sm text-gray-600 mb-2\">\n                      {userStats?.total_xp || 0} XP Total\n                    </div>\n                    <Progress value={getCurrentLevelProgress()} className=\"w-32\" />\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {Math.round(getCurrentLevelProgress())}% to next level\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Stats Overview */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"glass-card border-0 text-center\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex justify-center mb-2\">\n                    <Target className=\"h-8 w-8 text-orange-500\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stats-completed\">\n                    {userStats?.completed_levels || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Completed</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-card border-0 text-center\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex justify-center mb-2\">\n                    <Zap className=\"h-8 w-8 text-amber-500\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stats-xp\">\n                    {userStats?.total_xp || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total XP</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-card border-0 text-center\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex justify-center mb-2\">\n                    <Flame className=\"h-8 w-8 text-red-500\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {userStats?.streak || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Day Streak</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-card border-0 text-center\">\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex justify-center mb-2\">\n                    <Award className=\"h-8 w-8 text-purple-500\" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stats-badges\">\n                    {userStats?.badges?.length || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Badges</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Learning Progress */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-5 w-5 text-blue-500\" />\n                  <span>Learning Progress</span>\n                </CardTitle>\n                <CardDescription>\n                  Track your progress across different Python topics\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {categories.map((category) => {\n                  const progress = getCompletedLevelsInCategory(category.name);\n                  const percentage = progress.total > 0 ? (progress.completed / progress.total) * 100 : 0;\n                  \n                  return (\n                    <div key={category.name} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${category.color}`}></div>\n                          <span className=\"font-medium\">{category.name}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Levels {category.levels}\n                          </Badge>\n                        </div>\n                        <span className=\"text-sm text-gray-600\">\n                          {progress.completed}/{progress.total}\n                        </span>\n                      </div>\n                      <Progress value={percentage} className=\"h-2\" />\n                    </div>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Recent Achievements */}\n            {userStats?.badges && userStats.badges.length > 0 && (\n              <Card className=\"glass-card border-0\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Trophy className=\"h-5 w-5 text-amber-500\" />\n                    <span>Recent Achievements</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {userStats.badges.map((badge, index) => (\n                    <div key={index} className=\"flex items-center space-x-4 p-3 rounded-lg bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-100\">\n                      <div className=\"text-3xl\">{badge.icon}</div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-gray-900\">{badge.name}</h4>\n                        <p className=\"text-sm text-gray-600\">Earned recently</p>\n                      </div>\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* All Achievements */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Award className=\"h-5 w-5 text-purple-500\" />\n                  <span>All Achievements</span>\n                </CardTitle>\n                <CardDescription>\n                  {achievements.filter(a => a.earned).length} of {achievements.length} unlocked\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {achievements.map((achievement) => (\n                  <div \n                    key={achievement.id} \n                    className={`flex items-center space-x-3 p-3 rounded-lg border transition-all ${\n                      achievement.earned \n                        ? 'bg-green-50 border-green-200' \n                        : 'bg-gray-50 border-gray-200 opacity-60'\n                    }`}\n                  >\n                    <div className=\"text-2xl\">{achievement.icon}</div>\n                    <div className=\"flex-1\">\n                      <h4 className={`font-medium ${\n                        achievement.earned ? 'text-gray-900' : 'text-gray-500'\n                      }`}>\n                        {achievement.name}\n                      </h4>\n                      <p className={`text-xs ${\n                        achievement.earned ? 'text-gray-600' : 'text-gray-400'\n                      }`}>\n                        {achievement.description}\n                      </p>\n                    </div>\n                    {achievement.earned && (\n                      <CheckCircle className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                    )}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"glass-card border-0\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Code className=\"mr-2 h-4 w-4\" />\n                  Continue Learning\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Trophy className=\"mr-2 h-4 w-4\" />\n                  View Leaderboard\n                </Button>\n                <Separator />\n                <Button variant=\"outline\" className=\"w-full justify-start text-gray-500\" disabled>\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Edit Profile (Coming Soon)\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage;"